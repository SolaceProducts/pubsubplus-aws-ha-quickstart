name: build

# Controls when the action will run. 
on:
  #pull_request_target:

  push:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    steps:
    - name: Set env
      run: |
        echo "AWS_DEFAULT_REGION=eu-west-2" >> $GITHUB_ENV
        echo "TEST_S3_BUCKET=solace-cf-quickstart-ghtest" >> $GITHUB_ENV
        TESTSTACKPREFIX=T$(echo $(date +%s) | rev)
        echo "TESTSTACKPREFIX=$TESTSTACKPREFIX" >> $GITHUB_ENV
        echo "TESTSTACKNAME=$TESTSTACKPREFIX-sol-aws-ghtest" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v2

    - name: Recourse submodules
      run: |
        sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules; cat .gitmodules
        git submodule sync
        git submodule init
        git submodule update

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Lint yaml templates
      run: |
        sudo apt-get update -y; sudo apt-get install -y yamllint
        aws cloudformation validate-template --template-body file://templates/solace-master.template
        aws cloudformation validate-template --template-body file://templates/solace.template
        aws cloudformation validate-template --template-body file://templates/nodecreate.template
        aws s3 mb s3://${{ env.TEST_S3_BUCKET }} || echo "s3 bucket already existed"

    - name: Copy test artifacts to test S3 bucket
      run: |
        MESSAGEBROKERNODEINSTANCETYPE=t2.medium
        sed -i "s@SolaceDockerImageParameterValue@${{ secrets.BROKER_DOCKER_IMAGE_REF }}@g" ci/solace-aws-ha-3az-prod-test.json
        sed -i "s@EventBrokerNodeInstanceTypeParameterValue@${MESSAGEBROKERNODEINSTANCETYPE}@g" ci/solace-aws-ha-3az-prod-test.json
        aws s3 mb s3://${{ env.TEST_S3_BUCKET }} || echo "s3 bucket already existed"
        export BUCKETREGION=`aws s3api get-bucket-location --bucket ${{ env.TEST_S3_BUCKET }} | grep LocationConstraint | awk -F' ' '{print $NF}' | tr -d '"'`
        sed -i "s@SolaceStackRegionNAME@${AWS_DEFAULT_REGION}@g" ci/solace-aws-ha-3az-prod-test.json
        sed -i "s@SolaceBucketRegionNAME@${BUCKETREGION}@g" ci/solace-aws-ha-3az-prod-test.json
        aws s3 sync . s3://${{ env.TEST_S3_BUCKET }}/solace/eventbroker/latest --acl public-read

    - name: Test with production deployment option (create public subnet)
      run: |
        aws cloudformation create-stack --stack-name $TESTSTACKNAME --template-body file://templates/solace-master.template --parameters file://ci/solace-aws-ha-3az-prod-test.json --on-failure ROLLBACK --capabilities CAPABILITY_NAMED_IAM
        echo "Waiting for stack create complete"
        sleep 30; aws cloudformation describe-stacks --stack-name $TESTSTACKNAME
        until aws cloudformation describe-stacks --stack-name $TESTSTACKNAME | grep -m 1 -E 'CREATE_COMPLETE'; do
          sleep 10
          if aws cloudformation describe-stacks --stack-name $TESTSTACKNAME | grep -m 1 -E 'ROLLBACK_IN_PROGRESS'; then
            aws cloudformation describe-stack-events --stack-name $TESTSTACKNAME
            aws cloudformation describe-stacks --stack-name $TESTSTACKNAME
            exit 1
          fi
          sleep 10
        done
        aws cloudformation describe-stack-events --stack-name $TESTSTACKNAME
        aws cloudformation describe-stacks --stack-name $TESTSTACKNAME
        echo "Pausing to get the ELB ready"; sleep 10
        export url="$(aws elbv2 describe-load-balancers | grep DNSName | grep `echo $TESTSTACKPREFIX | head -c4` | awk -F '"' '{print $4}')"; echo $url
        until curl http://$url:8080; do sleep 10; done
        curl -O https://sftp.solace.com/download/SDKPERF_C_LINUX64
        tar -xvf SDKPERF_C_LINUX64
        sleep 30
        curl -sS -u admin:admin http://$url:8080/SEMP -d "<rpc><show><redundancy></redundancy></show></rpc>"
        curl -sS -u admin:admin http://$url:8080/SEMP -d "<rpc><show><config-sync></config-sync></show></rpc>"
        if [[ -z `curl -sS -u admin:admin http://$url:8080/SEMP -d "<rpc><show><config-sync></config-sync></show></rpc>" | grep "<oper-status>Up</oper-status>"` ]] ; then echo "config-sync not up!"; exit 1; fi
        pubSubTools/sdkperf_c -cip=$url -mn=100000 -mr=0 -ptl=t1 -stl=t1 | grep "Total Messages"

    - name: Delete test deployment (Cleanup)
      if: ${{ always() }}
      run: |
        aws cloudformation delete-stack --stack-name $TESTSTACKNAME || echo "Couldn't delete stack $TESTSTACKNAME"
        echo "Waiting for stack delete complete"
        stackid="$(aws cloudformation describe-stacks --stack-name $TESTSTACKNAME | grep StackId | awk -F '"' '{print $4}')"
        if [ -n "$stackid" ]; then until aws cloudformation describe-stacks --stack-name $stackid | grep -m 1 "DELETE_COMPLETE"; do sleep 10; done; fi

    - name: Testing with No Private Subnet
      run: |
        export TESTSTACKNAME2="$TESTSTACKNAME-1"
        echo "TESTSTACKNAME2=$TESTSTACKNAME2" >> $GITHUB_ENV
        sed -i "s@true@false@g" ci/solace-aws-ha-3az-prod-test.json
        aws cloudformation create-stack --stack-name $TESTSTACKNAME2 --template-body file://templates/solace-master.template --parameters file://ci/solace-aws-ha-3az-prod-test.json --on-failure ROLLBACK --capabilities CAPABILITY_NAMED_IAM
        echo "Waiting for stack create complete"
        until aws cloudformation describe-stacks --stack-name $TESTSTACKNAME2 | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS'; do sleep 10; done
        aws cloudformation describe-stack-events --stack-name $TESTSTACKNAME2
        aws cloudformation describe-stacks --stack-name $TESTSTACKNAME2

    - name: Delete No Private Subnet test deployment (Cleanup)
      if: ${{ always() }}
      run: |
        aws cloudformation delete-stack --stack-name $TESTSTACKNAME2 || echo "Couldn't delete stack $TESTSTACKNAME2"
        echo "Waiting for stack delete complete"
        stackid="$(aws cloudformation describe-stacks --stack-name $TESTSTACKNAME2 | grep StackId | awk -F '"' '{print $4}')"
        if [ -n "$stackid" ]; then until aws cloudformation describe-stacks --stack-name $stackid | grep -m 1 "DELETE_COMPLETE"; do sleep 10; done; fi

    - name: Update QuickStart S3 on success for SolaceProducts
      if: ${{ success() }} && github.event_name == 'push'
      run: |
        if [ ${{ github.ref }} == 'refs/heads/master' ] && [ ${{ github.repository_owner }} == 'SolaceProducts' ] ; then
          aws s3 sync . s3://solace-products/pubsubplus-aws-ha-quickstart/latest --acl public-read
        fi
